### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alternative {
  id: ID!
  text: String!
  votation: Votation
  votationId: String!
  votes: [Vote]
}

enum MajorityType {
  QUALIFIED
  SIMPLE
}

type Meeting {
  description: String
  id: ID!
  owner: User!
  participants: [Participant]!
  startTime: String!
  status: Status!
  title: String!
  votations: [Votation]
}

type Mutation {
  addUser(email: String!, username: String!): User
  cast_vote(alternativeId: String!, votationId: String!): Vote
}

type Participant {
  isVotingEligible: Boolean!
  meeting: Meeting!
  role: Role!
  user: User!
}

type Query {
  alternatives_by_votation(votationId: String!): [Alternative]
  meetings_for_user: [Meeting]!
  meetings_for_user_by_id(id: String!): Meeting!
  user(id: String!): User!
  users: [User]!
  votations_by_meeting(meetingId: String!): [Votation]
}

enum Role {
  ADMIN
  COUNTER
  PARTICIPANT
}

enum Status {
  ENDED
  ONGOING
  UPCOMING
}

type User {
  email: String!
  id: ID!
  username: String!
}

type Votation {
  alternatives: [Alternative]
  blankVotes: Boolean
  description: String!
  hasVoted: [User]
  id: ID!
  majorityThreshold: Int!
  majorityType: MajorityType!
  meeting: Meeting!
  meetingId: String!
  order: Int
  status: Status!
  title: String!
}

type Vote {
  alternative: Alternative
  alternativeId: String!
  id: ID!
  nextVote: Vote
  nextVoteId: String
  prevVote: Vote
}
