### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alternative {
  id: ID!
  text: String!
  votationId: String!
}

input AlternativeInput {
  id: String!
  text: String!
}

type AlternativeResult {
  id: ID!
  isWinner: Boolean!
  text: String!
  votationId: String!
  votes: Int!
}

type AlternativeWithWinner {
  id: ID!
  isWinner: Boolean!
  text: String!
}

input CreateMeetingInput {
  description: String
  organization: String!
  startTime: DateTime!
  title: String!
}

input CreateVotationInput {
  alternatives: [String!]
  blankVotes: Boolean!
  description: String
  hiddenVotes: Boolean!
  index: Int!
  majorityThreshold: Int!
  numberOfWinners: Int!
  title: String!
  type: VotationType!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

union DeleteParticipantResult = OwnerCannotBeRemovedFromParticipantError | Participant

union GetUserResult = User | UserNotFoundError

type MaxOneOpenVotationError {
  message: String!
}

type Meeting {
  description: String
  id: ID!
  organization: String!
  owner: User
  participants: [Participant]!
  startTime: DateTime!
  status: MeetingStatus!
  title: String!
  votations: [Votation]
}

enum MeetingStatus {
  ENDED
  ONGOING
  UPCOMING
}

type Mutation {
  """Creates invites and participants for the emails provided."""
  addParticipants(meetingId: String!, participants: [ParticipantInput!]!): Int

  """Returns the id of the votation"""
  castBlankVote(votationId: String!): String
  castStvVote(alternatives: [StvVoteAlternativeInput!]!, votationId: String!): String
  castVote(alternativeId: String!): Vote
  changeView(state: ViewState!): ViewState
  createAlternative(text: String!, votationId: String!): Alternative

  """"""
  createMeeting(meeting: CreateMeetingInput!): Meeting
  createVotations(meetingId: String!, votations: [CreateVotationInput!]!): [Votation]

  """"""
  deleteAlternatives(ids: [String!]!): [String]

  """"""
  deleteMeeting(id: String!): Meeting

  """"""
  deleteParticipants(emails: [String!]!, meetingId: String!): [String]

  """"""
  deleteVotations(ids: [String!]!): [String]

  """"""
  updateAlternative(id: String!, text: String!): Alternative

  """"""
  updateMeeting(meeting: UpdateMeetingInput!): Meeting

  """Update participants of a meeting."""
  updateParticipant(meetingId: String!, participant: ParticipantInput!): ParticipantOrInvite

  """"""
  updateVotationStatus(status: VotationStatus!, votationId: String!): UpdateVotationStatusResult

  """"""
  updateVotations(votations: [UpdateVotationInput!]!): [Votation]
}

type NewVoteRegisteredResponse {
  votationId: String!
  voteCount: Int!
}

type OwnerCannotBeRemovedFromParticipantError {
  message: String!
}

type Participant {
  isVotingEligible: Boolean!
  role: Role!
  user: User
}

input ParticipantInput {
  email: String!
  isVotingEligible: Boolean!
  role: Role!
}

type ParticipantOrInvite {
  email: String!
  isVotingEligible: Boolean!
  role: Role!
}

type Query {
  alternativesByVotation(votationId: String!): [Alternative]

  """"""
  getOpenVotation(meetingId: String!): String

  """"""
  getVotationResults(votationId: String!): VotationResults
  getVoteCount(votationId: String!): VoteCountResult

  """"""
  getWinnerOfVotation(votationId: String!): [Alternative]

  """Find a meeting by id from meetings youre participating in"""
  meetingById(meetingId: String!): Meeting

  """Find meetings you are participating in"""
  meetings: [Meeting]!

  """
  Return relevant information about invites and participants connected to meeting
  """
  participants(meetingId: String!): [ParticipantOrInvite]

  """
  Return the results of all the votations with votationStatus === "PUBLISHED_RESULT" of that meeting
  """
  resultsOfPublishedVotations(meetingId: String!): [VotationWithWinner]
  user: GetUserResult
  votationById(votationId: String!): Votation
}

enum Role {
  ADMIN
  COUNTER
  PARTICIPANT
}

input StvVoteAlternativeInput {
  alternativeId: String!
  ranking: Int!
}

type Subscription {
  newVoteRegistered(votationId: String!): NewVoteRegisteredResponse
  viewChanged: ViewState
  votationOpenedForMeeting(meetingId: String!): String
  votationStatusUpdated(id: String!): VotationStatusUpdatedResponse
}

input UpdateMeetingInput {
  description: String
  id: String!
  organization: String
  startTime: DateTime
  status: MeetingStatus
  title: String
}

input UpdateParticipantInput {
  email: String!
  isVotingEligible: Boolean!
  role: Role!
  userExists: Boolean!
}

input UpdateVotationInput {
  alternatives: [AlternativeInput!]
  blankVotes: Boolean!
  description: String
  hiddenVotes: Boolean!
  id: String!
  index: Int!
  majorityThreshold: Int!
  numberOfWinners: Int!
  title: String!
  type: VotationType!
}

union UpdateVotationStatusResult = MaxOneOpenVotationError | Votation

type User {
  email: String!
  emailVerified: Boolean!
  id: ID!
}

type UserNotFoundError {
  message: String!
}

"""The payload of viewChanged subscription"""
type ViewChangedPayload {
  viewState: ViewState!
}

"""

        LOADING: When the votation is loading for a new votation,
        ONGOING: When the Votation is in process, 
        CLOSED: When the votation has closed and no new votes are allowed,
        ENDED: When the votation has ended, the result will be announced and then switch to LOADING
        
"""
enum ViewState {
  CLOSED
  ENDED
  LOADING
  ONGOING
}

type Votation {
  alternatives: [Alternative]
  blankVotes: Boolean!
  description: String
  hasVoted: [String]
  hiddenVotes: Boolean!
  id: ID!
  index: Int!
  majorityThreshold: Int!
  meetingId: String!
  numberOfWinners: Int!
  order: Int
  status: VotationStatus!
  title: String!
  type: VotationType!
}

"""The results of a votation"""
type VotationResults {
  alternatives: [AlternativeResult]!
  blankVoteCount: Int!
  blankVotes: Boolean!
  voteCount: Int!
  votingEligibleCount: Int!
}

enum VotationStatus {
  CHECKING_RESULT
  INVALID
  OPEN
  PUBLISHED_RESULT
  UPCOMING
}

type VotationStatusUpdatedResponse {
  votationId: String!
  votationStatus: VotationStatus!
}

enum VotationType {
  QUALIFIED
  SIMPLE
  STV
}

type VotationWithWinner {
  alternatives: [AlternativeWithWinner]!
  id: ID!
}

type Vote {
  alternative: Alternative
  alternativeId: String!
  id: ID!
}

"""The result of getVoteCount"""
type VoteCountResult {
  voteCount: Int!
  votingEligibleCount: Int!
}
