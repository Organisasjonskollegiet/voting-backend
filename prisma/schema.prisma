// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  PARTICIPANT
  COUNTER
}

enum MajorityType {
  QUALIFIED
  SIMPLE
}

enum Status {
  UPCOMING
  ONGOING
  ENDED
}

model User {
  id            String        @id @default(uuid())
  username      String        @db.VarChar(255)
  email         String        @unique @db.VarChar(255)
  password      String
  meetings      Meeting[]
  votedAt       HasVoted[]
  participantAt Participant[]
}

model Meeting {
  id           String        @id @default(uuid()) @db.Uuid
  title        String        @db.VarChar(255)
  startTime    DateTime
  description  String
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  votations    Votation[]
  status       Status        @db.default(UPCOMING)
  participants Participant[]
}

model Participant {
  role             Role
  userId           String
  meetingId        String  @db.Uuid
  isVotingEligible Boolean @default(true)
  user             User    @relation(fields: [userId], references: [id])
  meeting          Meeting @relation(fields: [meetingId], references: [id])

  @@id([userId, meetingId])
}

model HasVoted {
  userId     String
  votationId String   @db.Uuid
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  votation   Votation @relation(fields: [votationId], references: [id])

  @@id([userId, votationId])
}

model Votation {
  id                String        @id @default(uuid()) @db.Uuid
  title             String        @db.VarChar(255)
  description       String
  order             Int
  status            Status        @default(UPCOMING)
  blankVotes        Boolean       @default(false)
  majorityType      MajorityType  @default(SIMPLE)
  majorityThreshold Int           @default(50)
  meetingId         String        @db.Uuid
  meeting           Meeting       @relation(fields: [meetingId], references: [id])
  hasVoted          HasVoted[]
  alternatives      Alternative[]
}

model Alternative {
  id         String   @id @default(uuid()) @db.Uuid
  text       String   @db.VarChar(120)
  votationId String   @db.Uuid
  votation   Votation @relation(fields: [votationId], references: [id])
  votes      Vote[]
}

model Vote {
  id            String      @id @default(uuid()) @db.Uuid
  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  alternativeId String      @db.Uuid
  nextVoteId    String?     @db.Uuid
  nextVote      Vote?       @relation("VoteRanking", fields: [nextVoteId], references: [id])
  prevVote      Vote?       @relation("VoteRanking")
}
